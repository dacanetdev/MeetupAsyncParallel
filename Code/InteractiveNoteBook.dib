#!markdown

## Threads

Thread exists from C# 1.0

#!csharp

using System;
using System.Threading;

Thread t = new Thread (WriteY); // Kick off a new thread
t.Start(); // running WriteY()
// Simultaneously, do something on the main thread.
for (int i = 0; i < 10; i++) Console.WriteLine("x");

void WriteY()
{
    for (int i = 0; i < 10; i++) Console.WriteLine("y");
}

#!csharp

using System;
using System.Threading;

public class Printer
{
    public void PrintNumbers()
    {
        // Display Thread info.
        Console.WriteLine("-> {0} is executing PrintNumbers()",
        Thread.CurrentThread.Name);
        // Print out numbers.
        Console.Write("Your numbers: ");
        for(int i = 0; i < 10; i++)
        {
        Console.Write("{0}, ", i);
        Thread.Sleep(2000);
        }
        Console.WriteLine();
    }
}


Console.WriteLine("***** The Amazing Thread App *****\n");
Console.Write("Do you want [1] or [2] threads? ");
string threadCount = "1";

// Name the current thread.
Thread primaryThread = Thread.CurrentThread;
primaryThread.Name = "Primary";
// Display Thread info.
Console.WriteLine("-> {0} is executing Main()",
Thread.CurrentThread.Name);
// Make worker class.
Printer p = new Printer();
switch(threadCount)
{
case "2":
// Now make the thread.
Thread backgroundThread =
new Thread(new ThreadStart(p.PrintNumbers));
backgroundThread.Name = "Secondary";
backgroundThread.Start();
break;

case "1":
p.PrintNumbers();
break;
default:
Console.WriteLine("I don't know what you want...you get 1 thread.");
goto case "1";
}
// Do some additional work.
Console.WriteLine("This is on the main thread, and we are finished.");
Console.ReadLine();

#!markdown

## Using lock for Synchronization

#!csharp

using System;
using System.Threading;

public class Printer
{
    public void PrintNumbers()
    {
        // Display Thread info.
        Console.WriteLine("-> {0} is executing PrintNumbers()",
        Thread.CurrentThread.Name);
        // Print out numbers.
        Console.Write("Your numbers: ");
        for(int index = 0; index < 10; index++)
        {
            Console.Write("{0}, ", index);
            Thread.Sleep(2000);
        }
        Console.WriteLine();
    }
}

Console.WriteLine("*****Synchronizing Threads *****\n");
Printer p = new Printer();
// Make 10 threads that are all pointing to the same
// method on the same object.
Thread[] threads = new Thread[10];
for (int i = 0; i < 10; i++)
{
    threads[i] = new Thread(p.PrintNumbers)
    {
    Name = $"Worker thread #{i}"
    };
}
// Now start each one.
foreach (Thread t in threads)
{
    t.Start();
}
Console.ReadLine();
